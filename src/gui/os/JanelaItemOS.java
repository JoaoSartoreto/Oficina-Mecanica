package gui.os;

import classes.ItemOS;
import classes.OrdemServico;
import classes.Peca;
import classes.Servico;
import excecoes.itemos.AdicionarItemOSNaoAbertaException;
import excecoes.produto.peca.EstoqueInsuficienteException;
import excecoes.itemos.ItemNaoEncontradoException;
import excecoes.produto.peca.PecaNaoEncontradaException;
import excecoes.QuantidadeInvalidaException;
import excecoes.itemos.RemoverItemOSNaoAbertaException;
import excecoes.os.OSNaoEncontradaException;
import excecoes.produto.servico.ServicoNaoEncontradoException;
import gui.Mensagem;
import java.awt.Rectangle;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import oficina.Oficina;

public class JanelaItemOS extends javax.swing.JFrame {

    private OrdemServico ordemServico;
    private JanelaOS janelaOS;
    
    public JanelaItemOS(OrdemServico ordemServico, JanelaOS janelaOS) {
        initComponents();
        this.ordemServico = ordemServico;
        this.janelaOS = janelaOS;
        atualizarTabela();
        
        ListSelectionModel selectionModel = tableItens.getSelectionModel();
        selectionModel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if(ordemServico.getSituacao() == 'A') botaoRemover.setEnabled(true);
            }
        });
        
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        botaoRemover = new javax.swing.JButton();
        labelDescricao = new javax.swing.JLabel();
        botaoLocalizar = new javax.swing.JButton();
        textLocalizar = new javax.swing.JTextField();
        scrollPaneTable = new javax.swing.JScrollPane();
        tableItens = new javax.swing.JTable();
        panelAdicionarProduto = new javax.swing.JPanel();
        labelCodigo = new javax.swing.JLabel();
        textCodigo = new javax.swing.JTextField();
        labelTipoProduto = new javax.swing.JLabel();
        radioPeca = new javax.swing.JRadioButton();
        radioServico = new javax.swing.JRadioButton();
        labelQuantidade = new javax.swing.JLabel();
        textQuantidade = new javax.swing.JTextField();
        botaoAdicionar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Itens OS - Controle de Oficina");

        botaoRemover.setText("Remover");
        botaoRemover.setEnabled(false);
        botaoRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRemoverActionPerformed(evt);
            }
        });

        labelDescricao.setText("Descrição:");

        botaoLocalizar.setText("Localizar");
        botaoLocalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLocalizarActionPerformed(evt);
            }
        });

        scrollPaneTable.setBorder(javax.swing.BorderFactory.createTitledBorder("Produtos"));

        tableItens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo", "Preço", "Quantidade", "Código", "Descrição", "Preço Un.", "Estoque", "Duração"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableItens.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrollPaneTable.setViewportView(tableItens);

        panelAdicionarProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("Adicionar Produto"));

        labelCodigo.setText("Código:");

        labelTipoProduto.setText("Tipo do produto:");

        buttonGroup1.add(radioPeca);
        radioPeca.setSelected(true);
        radioPeca.setText("Peça");

        buttonGroup1.add(radioServico);
        radioServico.setText("Serviço");

        labelQuantidade.setText("Quantidade:");

        botaoAdicionar.setText("Adicionar");
        botaoAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAdicionarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAdicionarProdutoLayout = new javax.swing.GroupLayout(panelAdicionarProduto);
        panelAdicionarProduto.setLayout(panelAdicionarProdutoLayout);
        panelAdicionarProdutoLayout.setHorizontalGroup(
            panelAdicionarProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAdicionarProdutoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAdicionarProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAdicionarProdutoLayout.createSequentialGroup()
                        .addGroup(panelAdicionarProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelTipoProduto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelQuantidade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelAdicionarProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textCodigo)
                            .addGroup(panelAdicionarProdutoLayout.createSequentialGroup()
                                .addComponent(radioPeca)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radioServico)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(textQuantidade)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAdicionarProdutoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(botaoAdicionar)))
                .addContainerGap())
        );
        panelAdicionarProdutoLayout.setVerticalGroup(
            panelAdicionarProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAdicionarProdutoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAdicionarProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTipoProduto)
                    .addComponent(radioPeca)
                    .addComponent(radioServico))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAdicionarProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCodigo)
                    .addComponent(textCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAdicionarProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelQuantidade)
                    .addComponent(textQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoAdicionar)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelAdicionarProduto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelDescricao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textLocalizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoLocalizar))
                    .addComponent(scrollPaneTable, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 539, Short.MAX_VALUE)
                        .addComponent(botaoRemover)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDescricao)
                    .addComponent(textLocalizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoLocalizar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneTable, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoRemover)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelAdicionarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRemoverActionPerformed
        String titulo = "Remover Item";
        
        int linha = this.tableItens.getSelectedRow();
        int codigo = Integer.parseInt((String) this.tableItens.getValueAt(linha, 3));
        String tipo = (String) this.tableItens.getValueAt(linha, 0);
        
        try {
            if(tipo == "Peça")
            {
                Oficina.excluirItemOSPeca(ordemServico, codigo);
            }else if(tipo == "Serviço"){               
                Oficina.excluirItemOSServico(ordemServico, codigo);
            }
            atualizarTabela();
            Mensagem.exibirMensagem(titulo, "Item removido com sucesso!");
        } catch (RemoverItemOSNaoAbertaException | ItemNaoEncontradoException e) {
            Mensagem.exibirMensagemErro(titulo, e.getMessage());
        }
        
        botaoRemover.setEnabled(false);
    }//GEN-LAST:event_botaoRemoverActionPerformed

    private void botaoLocalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLocalizarActionPerformed
        String titulo = "Localizar Item";
        String descricao = textLocalizar.getText();
        boolean encontrado = false;
           
        for(int i = 0; i < tableItens.getRowCount() && !encontrado; i++){
            if(tableItens.getValueAt(i, 4).equals(descricao)){
                tableItens.setRowSelectionInterval(i, i);
                tableItens.scrollRectToVisible(new Rectangle(tableItens.getCellRect(i, 0, true)));
                encontrado = true;
            }
        }
        
        if (!encontrado) {
            Mensagem.exibirMensagemErro(titulo, new ItemNaoEncontradoException().getMessage());
        }
    }//GEN-LAST:event_botaoLocalizarActionPerformed

    private void botaoAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAdicionarActionPerformed
        String titulo = "Adicionar Item";
        
        try {
            int codigoProd = Integer.parseInt(textCodigo.getText());
            if(radioPeca.isSelected())
            {
                Peca peca = Oficina.buscarPeca(codigoProd);
                Oficina.adicionarItemOSPeca(ordemServico, peca, Integer.parseInt(textQuantidade.getText()));
            }else{
                Servico servico = Oficina.buscarServico(codigoProd);
                Oficina.adicionarItemOSServico(ordemServico, servico, Integer.parseInt(textQuantidade.getText()));
            }
        } catch(PecaNaoEncontradaException | ServicoNaoEncontradoException | AdicionarItemOSNaoAbertaException | EstoqueInsuficienteException | QuantidadeInvalidaException e){
            Mensagem.exibirMensagemErro(titulo, e.getMessage());
        } catch (NumberFormatException e) {
            Mensagem.exibirMensagemErro(titulo, "Algum campo numérico está com um valor inválido ou vazio");
        }
        atualizarTabela();
        this.janelaOS.atualizarTabela();
    }//GEN-LAST:event_botaoAdicionarActionPerformed

    public void atualizarTabela()
    {
        String titulo = "Itens OS";
        
        DefaultTableModel tableModel = (DefaultTableModel)this.tableItens.getModel();
        tableModel.setRowCount(0);
        
        String tipo = "";
        String preco;
        String qtd;
        String codigo;
        String descricao;
        String precoUni;
        String estoque = "";
        String duracao = "";
        for (ItemOS itemOS : this.ordemServico.getItensOS()) {
            if(itemOS.getTipo()=='P')
            {
                tipo = "Peça";
                Peca peca;
                try {
                    peca = Oficina.buscarPeca(itemOS.getProduto().getCodigo());
                    estoque = peca.getQtdeEstoque()+"";
                } catch (PecaNaoEncontradaException ex) {
                    Mensagem.exibirMensagemErro(titulo, ex.getMessage());
                }     
            }else if(itemOS.getTipo() == 'S'){
                tipo = "Serviço";
                Servico servico;
                try {
                    servico = Oficina.buscarServico(itemOS.getProduto().getCodigo());
                    duracao = servico.getTempoExecucaoString();
                } catch (ServicoNaoEncontradoException ex) {
                    Mensagem.exibirMensagemErro(titulo, ex.getMessage());
                }    
            }
            preco = itemOS.getPreco() + "";
            qtd = itemOS.getQtde() + "";
            codigo = itemOS.getProduto().getCodigo()+"";
            descricao = itemOS.getProduto().getDescricao();
            precoUni = itemOS.getProduto().getPreco()+"";
            
            Object[] dados = {tipo,preco,qtd,codigo,descricao,precoUni,estoque,duracao};
            tableModel.addRow(dados);
        }
        
        if(ordemServico.getSituacao() != 'A') {
            botaoRemover.setEnabled(false);
            botaoAdicionar.setEnabled(false);
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoAdicionar;
    private javax.swing.JButton botaoLocalizar;
    private javax.swing.JButton botaoRemover;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel labelCodigo;
    private javax.swing.JLabel labelDescricao;
    private javax.swing.JLabel labelQuantidade;
    private javax.swing.JLabel labelTipoProduto;
    private javax.swing.JPanel panelAdicionarProduto;
    private javax.swing.JRadioButton radioPeca;
    private javax.swing.JRadioButton radioServico;
    private javax.swing.JScrollPane scrollPaneTable;
    private javax.swing.JTable tableItens;
    private javax.swing.JTextField textCodigo;
    private javax.swing.JTextField textLocalizar;
    private javax.swing.JTextField textQuantidade;
    // End of variables declaration//GEN-END:variables
}
